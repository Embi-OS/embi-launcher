#ifndef UNIT_LOG_H
#define UNIT_LOG_H

#include <QDebug>

#define UNITLOG_LEVEL_TRACE 0
#define UNITLOG_LEVEL_DEBUG 1
#define UNITLOG_LEVEL_INFO 2
#define UNITLOG_LEVEL_WARNING 3
#define UNITLOG_LEVEL_CRITICAL 4

#define UNITLOG_MIN_LEVEL UNITLOG_LEVEL_INFO

#define UNITLOG_NOTICE \
QMessageLogger(QT_MESSAGELOG_FILE, QT_MESSAGELOG_LINE, QT_MESSAGELOG_FUNC,"\x1C""UNIT").debug

#define UNITLOG_TRACE \
    if(UNITLOG_MIN_LEVEL>UNITLOG_LEVEL_TRACE) {} \
    else QMessageLogger(QT_MESSAGELOG_FILE, QT_MESSAGELOG_LINE, QT_MESSAGELOG_FUNC,"\x1B""UNIT").debug
#define UNITLOG_DEBUG \
    if(UNITLOG_MIN_LEVEL>UNITLOG_LEVEL_DEBUG) {} \
    else QMessageLogger(QT_MESSAGELOG_FILE, QT_MESSAGELOG_LINE, QT_MESSAGELOG_FUNC,"UNIT").debug
#define UNITLOG_INFO \
    if(UNITLOG_MIN_LEVEL>UNITLOG_LEVEL_INFO) {} \
    else QMessageLogger(QT_MESSAGELOG_FILE, QT_MESSAGELOG_LINE, QT_MESSAGELOG_FUNC,"UNIT").info
#define UNITLOG_WARNING \
    if(UNITLOG_MIN_LEVEL>UNITLOG_LEVEL_WARNING) {} \
    else QMessageLogger(QT_MESSAGELOG_FILE, QT_MESSAGELOG_LINE, QT_MESSAGELOG_FUNC,"UNIT").warning
#define UNITLOG_CRITICAL \
    if(UNITLOG_MIN_LEVEL>UNITLOG_LEVEL_CRITICAL) {} \
    else QMessageLogger(QT_MESSAGELOG_FILE, QT_MESSAGELOG_LINE, QT_MESSAGELOG_FUNC,"UNIT").critical
#define UNITLOG_FATAL \
    QMessageLogger(QT_MESSAGELOG_FILE, QT_MESSAGELOG_LINE, QT_MESSAGELOG_FUNC,"UNIT").fatal

#endif // UNIT_LOG_H
